{"version":3,"sources":["webpack://[name]/webpack/universalModuleDefinition","webpack://[name]/./src/helpers.ts","webpack://[name]/./src/MicroDOM.ts","webpack://[name]/./src/index.ts","webpack://[name]/./src/entry.ts","webpack://[name]/webpack/bootstrap","webpack://[name]/webpack/startup","webpack://[name]/webpack/runtime/define property getters","webpack://[name]/webpack/runtime/hasOwnProperty shorthand"],"names":["root","factory","exports","module","define","amd","self","getEls","target","els","arr","el","nodes","querySelectorAll","push","Element","recursiveAppend","content","entity","Array","isArray","append","nextTick","cbs","current","shift","setTimeout","length","this","MicroDOM","args","super","newInstance","document","entities","createElement","Object","tagName","forEach","innerHTML","text","textContent","classes","classList","add","remove","classname","toggle","reqtForAll","number","contains","type","listener","options","addEventListener","removeEventListener","obj","keys","key","style","setAttribute","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__","d","definition","o","defineProperty","enumerable","get","prop","prototype","hasOwnProperty","call"],"mappings":"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","file":"MicroDOM.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"MicroDOM\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"MicroDOM\"] = factory();\n\telse\n\t\troot[\"MicroDOM\"] = factory();\n})(self, function() {\nreturn ","import { I_MicroDOM } from \"./types\";\n\nexport function getEls<T extends Element = Element>(target: Element | Document, ...els: Array<string | Element>): T[] {\n  const arr: T[] = [];\n\n  for (const el of els) {\n    if (typeof el === 'string') {\n      const nodes: NodeListOf<T> = target.querySelectorAll(el);\n      arr.push(...nodes);\n    } else if (el instanceof Element) {\n      arr.push(el as T);\n    }\n  }\n\n  return arr;\n}\n\nexport function recursiveAppend<T extends Element = Element>(el: Element, ...content: Array<string | Element> | I_MicroDOM<T>) {\n  for (const entity of content) {\n    if (Array.isArray(entity)) {\n      recursiveAppend(el, ...entity);\n    } else {\n      el.append(entity);\n    }\n  }\n}\n\n\nexport function nextTick(...cbs: Function[]): void {\n  const arr = cbs;\n  const current = cbs.shift();\n  \n  current && setTimeout(() => {\n    current();\n\n    if (arr.length) {\n      nextTick(...arr);\n    }\n  }, 0);\n\n  return this;\n}","import { getEls, nextTick, recursiveAppend } from \"./helpers\";\nimport { I_MicroDOM } from \"./types\";\n\nexport default class MicroDOM<T extends Element = Element> extends Array<T> implements I_MicroDOM<T> {\n  constructor(...args) {\n    super(...args);\n  }\n\n\n  /**\n   * Returns a new instance containing the elements with the passed selectors and elements (or from the document if the current instance is empty)\n   */\n  get<U extends Element = Element>(...args: Array<string | Element>): I_MicroDOM<U> {\n    let newInstance: I_MicroDOM<U> = new MicroDOM<U>();\n\n    if (this.length) {\n      for (const el of this) {\n        newInstance.push(...getEls<U>(el, ...args));\n      }\n    } else {\n      newInstance.push(...getEls<U>(document, ...args));\n    }\n\n    return newInstance;\n  }\n\n\n  /**\n   * Returns a new instance with new created elements according to the passed parameters\n   */\n  create<U extends Element = Element>(...entities: Array<\n    string |\n    {\n      tagName?: string,\n      content?: string | Element | Array<string | Element> | I_MicroDOM<T>\n    }\n  >): I_MicroDOM<U> {\n    let newInstance: I_MicroDOM<U> = new MicroDOM<U>();\n\n    for (const entity of entities) {\n      if (typeof entity === 'string') {\n        newInstance.push(document.createElement(entity) as unknown as U);\n      } else if (entity instanceof Object) {\n        const el = document.createElement(entity.tagName || 'div') as unknown as U;\n        if (entity.content) {\n          if (Array.isArray(entity.content)) {\n            recursiveAppend<T>(el, ...entity.content)\n          } else {\n            recursiveAppend<T>(el, entity.content)\n          }\n        }\n        newInstance.push(el)\n      }\n    }\n\n    return newInstance;\n  }\n\n\n  /**\n   * Clears the contents of each element in the set and returns the instance itself\n   */\n  empty(): I_MicroDOM<T> {\n    this.forEach(el => (el as Element).innerHTML = '');\n\n    return this;\n  }\n\n\n  /**\n   * Sets the textContent property for each collection item and returns an instance\n   */\n  text(text?: string): I_MicroDOM<T> {\n    this.forEach(el => el.textContent = text || '');\n\n    return this;\n  }\n\n\n  /**\n   * Inserts a set of Node objects or DOMString objects after the last child of each array element\n   */\n  append(...append: Array<string | Element> | I_MicroDOM<T>): I_MicroDOM<T> {\n    this.forEach(el => recursiveAppend(el, ...append));\n\n    return this;\n  }\n\n\n  /**\n   * Adds a class or classes to all array elements\n   */\n  addClass(...classes: string[]): I_MicroDOM<T> {\n    this.forEach(el => el.classList.add(...classes));\n\n    return this;\n  }\n\n\n  /**\n   * Removes a class or classes from all array elements\n   */\n  removeClass(...classes: string[]): I_MicroDOM<T> {\n    this.forEach(el => el.classList.remove(...classes));\n\n    return this;\n  }\n\n\n  /**\n   * Adds or removes a class for each element of the array, depending on its presence\n   */\n  toggleClass(classname: string): I_MicroDOM<T> {\n    this.forEach(el => el.classList.toggle(classname));\n\n    return this;\n  }\n\n\n  /**\n   * Determine if any of the agreed members are assigned to this class. Or, if you pass \"true\" as the second argument, then each element (default: reqtForAll = false)\n   */\n  hasClass(classname: string, reqtForAll: boolean = false): boolean {\n    if (reqtForAll) { // The presence of a class for each element of the set\n      let number = 0;\n      this.forEach(el => {\n        if ((el as T).classList.contains(classname)) {\n          number++;\n        }\n      })\n      return number === this.length;\n    } else {          // the presence of a class for at least one element of the set\n      for (const el of this) {\n        if ((el as T).classList.contains(classname)) {\n          return true;\n        }\n      }\n      return false;\n    }\n  }\n\n\n  /**\n   * Calls the \"addEventListener\" method for each set item\n   */\n  addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): I_MicroDOM<T> {\n    this.forEach(el => el.addEventListener(type, listener, options));\n\n    return this;\n  }\n\n\n  /**\n   * Calls the \"removeEventListener\" method for each set item\n   */\n  removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): I_MicroDOM<T> {\n    this.forEach(el => el.removeEventListener(type, listener, options));\n\n    return this;\n  }\n\n\n  /**\n   * Sets the style attribute property passed in the object by key\n   */\n  css(obj: object): I_MicroDOM<T> {\n    this.forEach(el => Object.keys(obj).forEach(key => (el as unknown as HTMLElement).style[key] = obj[key]));\n\n    return this;\n  }\n\n\n  /**\n   * Sets the attribute property passed in the object by key\n   */\n  attr(obj: object): I_MicroDOM<T> {\n    this.forEach(el => Object.keys(obj).forEach(key => el.setAttribute(key, obj[key])));\n\n    return this;\n  }\n\n\n  /**\n   * Recursively calls each passed function in a new setTimeout(() => {}, 0)\n   */\n  nextTick(...cbs: Function[]): I_MicroDOM<T> {\n    nextTick(...cbs);\n\n    return this;\n  }\n}","import _ from \"./entry\";\n\nexport default _;\n\n// ===\n\nimport MicroDOM from \"./MicroDOM\";\nimport { nextTick } from \"./helpers\";\nimport { I_MicroDOM } from \"./types\";\n\nexport {\n  MicroDOM,\n  nextTick,\n\n  I_MicroDOM\n};","import { getEls } from \"./helpers\";\nimport MicroDOM from \"./MicroDOM\";\nimport { I_MicroDOM } from \"./types\";\n\nexport default function _<T extends Element = Element>(...args: Array<string | Element>): I_MicroDOM<T> {\n  if (args instanceof MicroDOM) {\n    return args;\n  }\n\n  return new MicroDOM<T>(...getEls<T>(document, ...args));\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(867);\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)"],"sourceRoot":""}